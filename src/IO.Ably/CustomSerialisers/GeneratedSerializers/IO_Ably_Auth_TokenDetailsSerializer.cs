//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace IO.Ably.CustomSerialisers
{


    [System.CodeDom.Compiler.GeneratedCodeAttribute("MsgPack.Serialization.CodeDomSerializers.CodeDomSerializerBuilder", "0.6.0.0")]
    public class IO_Ably_Auth_TokenDetailsSerializer : MsgPack.Serialization.MessagePackSerializer<IO.Ably.Auth.TokenDetails>
    {

        private MsgPack.Serialization.MessagePackSerializer<string> _serializer0;

        private MsgPack.Serialization.MessagePackSerializer<System.DateTimeOffset> _serializer1;

        private MsgPack.Serialization.MessagePackSerializer<IO.Ably.Capability> _serializer2;

        private MsgPack.Serialization.MessagePackSerializer<System.Nullable<System.DateTimeOffset>> _serializer3;

        public IO_Ably_Auth_TokenDetailsSerializer(MsgPack.Serialization.SerializationContext context) :
                base(context)
        {
            MsgPack.Serialization.PolymorphismSchema schema0 = default(MsgPack.Serialization.PolymorphismSchema);
            schema0 = null;
            this._serializer0 = context.GetSerializer<string>(schema0);
            this._serializer1 = context.GetSerializer<System.DateTimeOffset>(MsgPack.Serialization.DateTimeMessagePackSerializerHelpers.DetermineDateTimeConversionMethod(context, MsgPack.Serialization.DateTimeMemberConversionMethod.Default));
            MsgPack.Serialization.PolymorphismSchema schema1 = default(MsgPack.Serialization.PolymorphismSchema);
            schema1 = null;
            this._serializer2 = context.GetSerializer<IO.Ably.Capability>(schema1);
            MsgPack.Serialization.PolymorphismSchema schema2 = default(MsgPack.Serialization.PolymorphismSchema);
            schema2 = null;
            this._serializer3 = context.GetSerializer<System.Nullable<System.DateTimeOffset>>(schema2);
        }

        protected override void PackToCore(MsgPack.Packer packer, IO.Ably.Auth.TokenDetails objectTree)
        {
            packer.PackMapHeader(6);
            this._serializer0.PackTo(packer, "token");
            this._serializer0.PackTo(packer, objectTree.Token);
            this._serializer0.PackTo(packer, "keyName");
            this._serializer0.PackTo(packer, objectTree.KeyName);
            this._serializer0.PackTo(packer, "expires");
            this._serializer1.PackTo(packer, objectTree.Expires);
            this._serializer0.PackTo(packer, "issued");
            this._serializer1.PackTo(packer, objectTree.Issued);
            this._serializer0.PackTo(packer, "capability");
            this._serializer2.PackTo(packer, objectTree.Capability);
            this._serializer0.PackTo(packer, "clientId");
            this._serializer0.PackTo(packer, objectTree.ClientId);
        }

        protected override IO.Ably.Auth.TokenDetails UnpackFromCore(MsgPack.Unpacker unpacker)
        {
            IO.Ably.Auth.TokenDetails result = default(IO.Ably.Auth.TokenDetails);
            result = new IO.Ably.Auth.TokenDetails();
            {
                int itemsCount0 = default(int);
                itemsCount0 = MsgPack.Serialization.UnpackHelpers.GetItemsCount(unpacker);
                for (int i = 0; (i < itemsCount0); i = (i + 1))
                {
                    string key = default(string);
                    string nullable4 = default(string);
                    nullable4 = MsgPack.Serialization.UnpackHelpers.UnpackStringValue(unpacker, typeof(IO.Ably.Auth.TokenDetails), "MemberName");
                    if (((nullable4 == null)
                                == false))
                    {
                        key = nullable4;
                    }
                    else
                    {
                        throw MsgPack.Serialization.SerializationExceptions.NewNullIsProhibited("MemberName");
                    }
                    if ((key == "clientId"))
                    {
                        string nullable9 = default(string);
                        nullable9 = MsgPack.Serialization.UnpackHelpers.UnpackStringValue(unpacker, typeof(IO.Ably.Auth.TokenDetails), "System.String ClientId");
                        if (((nullable9 == null)
                                    == false))
                        {
                            result.ClientId = nullable9;
                        }
                    }
                    else
                    {
                        if ((key == "keyName"))
                        {
                            string keyNameValue = null;
                            if ((unpacker.Read() == false))
                            {
                                throw MsgPack.Serialization.SerializationExceptions.NewMissingItem(i);
                            }
                            if (((unpacker.IsArrayHeader == false)
                                        && (unpacker.IsMapHeader == false)))
                            {
                                keyNameValue = this._serializer0.UnpackFrom(unpacker);
                            }
                            else
                            {
                                MsgPack.Unpacker disposable10 = default(MsgPack.Unpacker);
                                disposable10 = unpacker.ReadSubtree();
                                try
                                {
                                    keyNameValue = this._serializer0.UnpackFrom(disposable10);
                                }
                                finally
                                {
                                    if (((disposable10 == null)
                                                == false))
                                    {
                                        disposable10.Dispose();
                                    }
                                }
                            }
                            if (((keyNameValue == null)
                                        == false))
                            {
                                result.KeyName = keyNameValue;
                            }
                        }
                        else if ((key == "capability"))
                        {
                            IO.Ably.Capability nullable8 = default(IO.Ably.Capability);
                            if ((unpacker.Read() == false))
                            {
                                throw MsgPack.Serialization.SerializationExceptions.NewMissingItem(i);
                            }
                            if (((unpacker.IsArrayHeader == false)
                                        && (unpacker.IsMapHeader == false)))
                            {
                                nullable8 = this._serializer2.UnpackFrom(unpacker);
                            }
                            else
                            {
                                MsgPack.Unpacker disposable4 = default(MsgPack.Unpacker);
                                disposable4 = unpacker.ReadSubtree();
                                try
                                {
                                    nullable8 = this._serializer2.UnpackFrom(disposable4);
                                }
                                finally
                                {
                                    if (((disposable4 == null)
                                                == false))
                                    {
                                        disposable4.Dispose();
                                    }
                                }
                            }
                            if (((nullable8 == null)
                                        == false))
                            {
                                result.Capability = nullable8;
                            }
                        }
                        else
                        {
                            if ((key == "issued"))
                            {
                                System.Nullable<System.DateTimeOffset> nullable7 = default(System.Nullable<System.DateTimeOffset>);
                                if ((unpacker.Read() == false))
                                {
                                    throw MsgPack.Serialization.SerializationExceptions.NewMissingItem(i);
                                }
                                if (((unpacker.IsArrayHeader == false)
                                            && (unpacker.IsMapHeader == false)))
                                {
                                    nullable7 = this._serializer3.UnpackFrom(unpacker);
                                }
                                else
                                {
                                    MsgPack.Unpacker disposable3 = default(MsgPack.Unpacker);
                                    disposable3 = unpacker.ReadSubtree();
                                    try
                                    {
                                        nullable7 = this._serializer3.UnpackFrom(disposable3);
                                    }
                                    finally
                                    {
                                        if (((disposable3 == null)
                                                    == false))
                                        {
                                            disposable3.Dispose();
                                        }
                                    }
                                }
                                if (nullable7.HasValue)
                                {
                                    result.Issued = nullable7.Value;
                                }
                            }
                            else
                            {
                                if ((key == "expires"))
                                {
                                    System.Nullable<System.DateTimeOffset> nullable6 = default(System.Nullable<System.DateTimeOffset>);
                                    if ((unpacker.Read() == false))
                                    {
                                        throw MsgPack.Serialization.SerializationExceptions.NewMissingItem(i);
                                    }
                                    if (((unpacker.IsArrayHeader == false)
                                                && (unpacker.IsMapHeader == false)))
                                    {
                                        nullable6 = this._serializer3.UnpackFrom(unpacker);
                                    }
                                    else
                                    {
                                        MsgPack.Unpacker disposable2 = default(MsgPack.Unpacker);
                                        disposable2 = unpacker.ReadSubtree();
                                        try
                                        {
                                            nullable6 = this._serializer3.UnpackFrom(disposable2);
                                        }
                                        finally
                                        {
                                            if (((disposable2 == null)
                                                        == false))
                                            {
                                                disposable2.Dispose();
                                            }
                                        }
                                    }
                                    if (nullable6.HasValue)
                                    {
                                        result.Expires = nullable6.Value;
                                    }
                                }
                                else
                                {
                                    if ((key == "token"))
                                    {
                                        string nullable5 = default(string);
                                        nullable5 = MsgPack.Serialization.UnpackHelpers.UnpackStringValue(unpacker, typeof(IO.Ably.Auth.TokenDetails), "System.String Token");
                                        if (((nullable5 == null)
                                                    == false))
                                        {
                                            result.Token = nullable5;
                                        }
                                    }
                                    else
                                    {
                                        unpacker.Skip();
                                    }
                                }
                            }
                        }
                    }
                }
            }
            return result;
        }

        private static T @__Conditional<T>(bool condition, T whenTrue, T whenFalse)
        {
            if (condition)
            {
                return whenTrue;
            }
            else
            {
                return whenFalse;
            }
        }
    }
}
