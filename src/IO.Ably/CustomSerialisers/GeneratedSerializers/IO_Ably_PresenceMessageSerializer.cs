//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System.Linq;
using MsgPack;

namespace IO.Ably.CustomSerialisers {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("MsgPack.Serialization.CodeDomSerializers.CodeDomSerializerBuilder", "0.6.0.0")]
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public class IO_Ably_PresenceMessageSerializer : MsgPack.Serialization.MessagePackSerializer<IO.Ably.PresenceMessage> {
        
        private MsgPack.Serialization.MessagePackSerializer<string> _serializer0;
        
        private MsgPack.Serialization.MessagePackSerializer<IO.Ably.PresenceMessage.ActionType> _serializer1;
        
        private MsgPack.Serialization.MessagePackSerializer<object> _serializer2;
        
        private MsgPack.Serialization.MessagePackSerializer<System.Nullable<System.DateTimeOffset>> _serializer3;
        
        private MsgPack.Serialization.MessagePackSerializer<System.Nullable<IO.Ably.PresenceMessage.ActionType>> _serializer4;
        
        public IO_Ably_PresenceMessageSerializer(MsgPack.Serialization.SerializationContext context) : 
                base(context) {
            MsgPack.Serialization.PolymorphismSchema schema0 = default(MsgPack.Serialization.PolymorphismSchema);
            schema0 = null;
            this._serializer0 = context.GetSerializer<string>(schema0);
            this._serializer1 = context.GetSerializer<IO.Ably.PresenceMessage.ActionType>(MsgPack.Serialization.EnumMessagePackSerializerHelpers.DetermineEnumSerializationMethod(context, typeof(IO.Ably.PresenceMessage.ActionType), MsgPack.Serialization.EnumMemberSerializationMethod.ByUnderlyingValue));
            MsgPack.Serialization.PolymorphismSchema schema1 = default(MsgPack.Serialization.PolymorphismSchema);
            schema1 = null;
            this._serializer2 = context.GetSerializer<object>(schema1);
            MsgPack.Serialization.PolymorphismSchema schema2 = default(MsgPack.Serialization.PolymorphismSchema);
            schema2 = null;
            this._serializer3 = context.GetSerializer<System.Nullable<System.DateTimeOffset>>(schema2);
            MsgPack.Serialization.PolymorphismSchema schema3 = default(MsgPack.Serialization.PolymorphismSchema);
            schema3 = null;
            this._serializer4 = context.GetSerializer<System.Nullable<IO.Ably.PresenceMessage.ActionType>>(schema3);
        }
        
        protected override void PackToCore(MsgPack.Packer packer, IO.Ably.PresenceMessage objectTree)
        {
            var nonNullFields = new bool[]
            {
                objectTree.id.IsNotEmpty(),
                objectTree.clientId.IsNotEmpty(),
                objectTree.connectionId.IsNotEmpty(),
                objectTree.data != null,
                objectTree.encoding.IsNotEmpty(),
                objectTree.encoding.IsNotEmpty(),
                objectTree.timestamp != null,
            }.Count(x => x) + 1; //one for action

            packer.PackMapHeader(nonNullFields);
            if (objectTree.id.IsNotEmpty())
            {
                this._serializer0.PackTo(packer, "id");
                this._serializer0.PackTo(packer, objectTree.id);
            }
            this._serializer0.PackTo(packer, "action");
            this._serializer1.PackTo(packer, objectTree.action);
            if (objectTree.clientId.IsNotEmpty())
            {
                this._serializer0.PackTo(packer, "clientId");
                this._serializer0.PackTo(packer, objectTree.clientId);
            }
            if (objectTree.connectionId.IsNotEmpty())
            {
                this._serializer0.PackTo(packer, "connectionId");
                this._serializer0.PackTo(packer, objectTree.connectionId);
            }
            if (objectTree.data != null)
            {
                this._serializer0.PackTo(packer, "data");
                this._serializer2.PackTo(packer, objectTree.data);
            }
            if (objectTree.encoding.IsNotEmpty())
            {
                this._serializer0.PackTo(packer, "encoding");
                this._serializer0.PackTo(packer, objectTree.encoding);
            }
            if (objectTree.timestamp != null)
            {
                this._serializer0.PackTo(packer, "timestamp");
                this._serializer3.PackTo(packer, objectTree.timestamp);
            }
        }
        
        protected override IO.Ably.PresenceMessage UnpackFromCore(MsgPack.Unpacker unpacker) {
            IO.Ably.PresenceMessage result = default(IO.Ably.PresenceMessage);
            result = new IO.Ably.PresenceMessage();
            if (unpacker.IsArrayHeader) {
                int unpacked = default(int);
                int itemsCount = default(int);
                itemsCount = MsgPack.Serialization.UnpackHelpers.GetItemsCount(unpacker);
                string nullable = default(string);
                if ((unpacked < itemsCount)) {
                    nullable = MsgPack.Serialization.UnpackHelpers.UnpackStringValue(unpacker, typeof(IO.Ably.PresenceMessage), "System.String id");
                }
                if (((nullable == null) 
                            == false)) {
                    result.id = nullable;
                }
                unpacked = (unpacked + 1);
                System.Nullable<IO.Ably.PresenceMessage.ActionType> nullable0 = default(System.Nullable<IO.Ably.PresenceMessage.ActionType>);
                if ((unpacked < itemsCount)) {
                    if ((unpacker.Read() == false)) {
                        throw MsgPack.Serialization.SerializationExceptions.NewMissingItem(1);
                    }
                    if (((unpacker.IsArrayHeader == false) 
                                && (unpacker.IsMapHeader == false))) {
                        nullable0 = this._serializer4.UnpackFrom(unpacker);
                    }
                    else {
                        MsgPack.Unpacker disposable = default(MsgPack.Unpacker);
                        disposable = unpacker.ReadSubtree();
                        try {
                            nullable0 = this._serializer4.UnpackFrom(disposable);
                        }
                        finally {
                            if (((disposable == null) 
                                        == false)) {
                                disposable.Dispose();
                            }
                        }
                    }
                }
                if (nullable0.HasValue) {
                    result.action = nullable0.Value;
                }
                unpacked = (unpacked + 1);
                string nullable1 = default(string);
                if ((unpacked < itemsCount)) {
                    nullable1 = MsgPack.Serialization.UnpackHelpers.UnpackStringValue(unpacker, typeof(IO.Ably.PresenceMessage), "System.String clientId");
                }
                if (((nullable1 == null) 
                            == false)) {
                    result.clientId = nullable1;
                }
                unpacked = (unpacked + 1);
                string nullable2 = default(string);
                if ((unpacked < itemsCount)) {
                    nullable2 = MsgPack.Serialization.UnpackHelpers.UnpackStringValue(unpacker, typeof(IO.Ably.PresenceMessage), "System.String connectionId");
                }
                if (((nullable2 == null) 
                            == false)) {
                    result.connectionId = nullable2;
                }
                unpacked = (unpacked + 1);
                object nullable3 = default(object);
                if ((unpacked < itemsCount)) {
                    if ((unpacker.Read() == false)) {
                        throw MsgPack.Serialization.SerializationExceptions.NewMissingItem(4);
                    }
                    if (((unpacker.IsArrayHeader == false) 
                                && (unpacker.IsMapHeader == false))) {
                        nullable3 = this._serializer2.UnpackFrom(unpacker);
                    }
                    else {
                        MsgPack.Unpacker disposable0 = default(MsgPack.Unpacker);
                        disposable0 = unpacker.ReadSubtree();
                        try {
                            nullable3 = this._serializer2.UnpackFrom(disposable0);
                        }
                        finally {
                            if (((disposable0 == null) 
                                        == false)) {
                                disposable0.Dispose();
                            }
                        }
                    }
                }
                if (((nullable3 == null) 
                            == false)) {
                    result.data = nullable3;
                }
                unpacked = (unpacked + 1);
                string nullable4 = default(string);
                if ((unpacked < itemsCount)) {
                    nullable4 = MsgPack.Serialization.UnpackHelpers.UnpackStringValue(unpacker, typeof(IO.Ably.PresenceMessage), "System.String encoding");
                }
                if (((nullable4 == null) 
                            == false)) {
                    result.encoding = nullable4;
                }
                unpacked = (unpacked + 1);
                System.Nullable<System.DateTimeOffset> nullable5 = default(System.Nullable<System.DateTimeOffset>);
                if ((unpacked < itemsCount)) {
                    if ((unpacker.Read() == false)) {
                        throw MsgPack.Serialization.SerializationExceptions.NewMissingItem(6);
                    }
                    if (((unpacker.IsArrayHeader == false) 
                                && (unpacker.IsMapHeader == false))) {
                        nullable5 = this._serializer3.UnpackFrom(unpacker);
                    }
                    else {
                        MsgPack.Unpacker disposable1 = default(MsgPack.Unpacker);
                        disposable1 = unpacker.ReadSubtree();
                        try {
                            nullable5 = this._serializer3.UnpackFrom(disposable1);
                        }
                        finally {
                            if (((disposable1 == null) 
                                        == false)) {
                                disposable1.Dispose();
                            }
                        }
                    }
                }
                if (nullable5.HasValue) {
                    result.timestamp = nullable5;
                }
                unpacked = (unpacked + 1);
            }
            else {
                int itemsCount0 = default(int);
                itemsCount0 = MsgPack.Serialization.UnpackHelpers.GetItemsCount(unpacker);
                for (int i = 0; (i < itemsCount0); i = (i + 1)) {
                    string key = default(string);
                    string nullable6 = default(string);
                    nullable6 = MsgPack.Serialization.UnpackHelpers.UnpackStringValue(unpacker, typeof(IO.Ably.PresenceMessage), "MemberName");
                    if (((nullable6 == null) 
                                == false)) {
                        key = nullable6;
                    }
                    else {
                        throw MsgPack.Serialization.SerializationExceptions.NewNullIsProhibited("MemberName");
                    }
                    if ((key == "timestamp")) {
                        System.Nullable<System.DateTimeOffset> nullable13 = default(System.Nullable<System.DateTimeOffset>);
                        if ((unpacker.Read() == false)) {
                            throw MsgPack.Serialization.SerializationExceptions.NewMissingItem(i);
                        }
                        if (((unpacker.IsArrayHeader == false) 
                                    && (unpacker.IsMapHeader == false))) {
                            nullable13 = this._serializer3.UnpackFrom(unpacker);
                        }
                        else {
                            MsgPack.Unpacker disposable4 = default(MsgPack.Unpacker);
                            disposable4 = unpacker.ReadSubtree();
                            try {
                                nullable13 = this._serializer3.UnpackFrom(disposable4);
                            }
                            finally {
                                if (((disposable4 == null) 
                                            == false)) {
                                    disposable4.Dispose();
                                }
                            }
                        }
                        if (nullable13.HasValue) {
                            result.timestamp = nullable13;
                        }
                    }
                    else {
                        if ((key == "encoding")) {
                            string nullable12 = default(string);
                            nullable12 = MsgPack.Serialization.UnpackHelpers.UnpackStringValue(unpacker, typeof(IO.Ably.PresenceMessage), "System.String encoding");
                            if (((nullable12 == null) 
                                        == false)) {
                                result.encoding = nullable12;
                            }
                        }
                        else {
                            if ((key == "data")) {
                                object nullable11 = default(object);
                                if ((unpacker.Read() == false)) {
                                    throw MsgPack.Serialization.SerializationExceptions.NewMissingItem(i);
                                }
                                if (((unpacker.IsArrayHeader == false) 
                                            && (unpacker.IsMapHeader == false))) {
                                    nullable11 = this._serializer2.UnpackFrom(unpacker);
                                }
                                else {
                                    MsgPack.Unpacker disposable3 = default(MsgPack.Unpacker);
                                    disposable3 = unpacker.ReadSubtree();
                                    try {
                                        nullable11 = this._serializer2.UnpackFrom(disposable3);
                                    }
                                    finally {
                                        if (((disposable3 == null) 
                                                    == false)) {
                                            disposable3.Dispose();
                                        }
                                    }
                                }
                                if (((nullable11 == null) 
                                            == false)) {

                                    if (nullable11 is MsgPack.MessagePackObject)
                                    {
                                        result.data = ((MessagePackObject)nullable11).ToObject();
                                    }
                                    else if (nullable11 is MessagePackObject[])
                                    {
                                        result.data =
                                            ((MessagePackObject[]) nullable11).Select(x => x.ToObject()).ToArray();
                                    }
                                    else
                                    {
                                        result.data = nullable11;
                                    }
                                }
                            }
                            else {
                                if ((key == "connectionId")) {
                                    string nullable10 = default(string);
                                    nullable10 = MsgPack.Serialization.UnpackHelpers.UnpackStringValue(unpacker, typeof(IO.Ably.PresenceMessage), "System.String connectionId");
                                    if (((nullable10 == null) 
                                                == false)) {
                                        result.connectionId = nullable10;
                                    }
                                }
                                else {
                                    if ((key == "clientId")) {
                                        string nullable9 = default(string);
                                        nullable9 = MsgPack.Serialization.UnpackHelpers.UnpackStringValue(unpacker, typeof(IO.Ably.PresenceMessage), "System.String clientId");
                                        if (((nullable9 == null) 
                                                    == false)) {
                                            result.clientId = nullable9;
                                        }
                                    }
                                    else {
                                        if ((key == "action")) {
                                            System.Nullable<IO.Ably.PresenceMessage.ActionType> nullable8 = default(System.Nullable<IO.Ably.PresenceMessage.ActionType>);
                                            if ((unpacker.Read() == false)) {
                                                throw MsgPack.Serialization.SerializationExceptions.NewMissingItem(i);
                                            }
                                            if (((unpacker.IsArrayHeader == false) 
                                                        && (unpacker.IsMapHeader == false))) {
                                                nullable8 = this._serializer4.UnpackFrom(unpacker);
                                            }
                                            else {
                                                MsgPack.Unpacker disposable2 = default(MsgPack.Unpacker);
                                                disposable2 = unpacker.ReadSubtree();
                                                try {
                                                    nullable8 = this._serializer4.UnpackFrom(disposable2);
                                                }
                                                finally {
                                                    if (((disposable2 == null) 
                                                                == false)) {
                                                        disposable2.Dispose();
                                                    }
                                                }
                                            }
                                            if (nullable8.HasValue) {
                                                result.action = nullable8.Value;
                                            }
                                        }
                                        else {
                                            if ((key == "id")) {
                                                string nullable7 = default(string);
                                                nullable7 = MsgPack.Serialization.UnpackHelpers.UnpackStringValue(unpacker, typeof(IO.Ably.PresenceMessage), "System.String id");
                                                if (((nullable7 == null) 
                                                            == false)) {
                                                    result.id = nullable7;
                                                }
                                            }
                                            else {
                                                unpacker.Skip();
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
            return result;
        }
        
        private static T @__Conditional<T>(bool condition, T whenTrue, T whenFalse)
         {
            if (condition) {
                return whenTrue;
            }
            else {
                return whenFalse;
            }
        }
    }
}
