//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace IO.Ably.CustomSerialisers {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("MsgPack.Serialization.CodeDomSerializers.CodeDomSerializerBuilder", "0.6.0.0")]
    public class IO_Ably_RequestCountSerializer : MsgPack.Serialization.MessagePackSerializer<IO.Ably.RequestCount> {
        
        private MsgPack.Serialization.MessagePackSerializer<string> _serializer0;
        
        private MsgPack.Serialization.MessagePackSerializer<long> _serializer1;
        
        public IO_Ably_RequestCountSerializer(MsgPack.Serialization.SerializationContext context) : 
                base(context) {
            MsgPack.Serialization.PolymorphismSchema schema0 = default(MsgPack.Serialization.PolymorphismSchema);
            schema0 = null;
            this._serializer0 = context.GetSerializer<string>(schema0);
            MsgPack.Serialization.PolymorphismSchema schema1 = default(MsgPack.Serialization.PolymorphismSchema);
            schema1 = null;
            this._serializer1 = context.GetSerializer<long>(schema1);
        }
        
        protected override void PackToCore(MsgPack.Packer packer, IO.Ably.RequestCount objectTree) {
            packer.PackMapHeader(3);
            this._serializer0.PackTo(packer, "failed");
            this._serializer1.PackTo(packer, objectTree.Failed);
            this._serializer0.PackTo(packer, "refused");
            this._serializer1.PackTo(packer, objectTree.Refused);
            this._serializer0.PackTo(packer, "succeeded");
            this._serializer1.PackTo(packer, objectTree.Succeeded);
        }
        
        protected override IO.Ably.RequestCount UnpackFromCore(MsgPack.Unpacker unpacker)
        {
            IO.Ably.RequestCount result = default(IO.Ably.RequestCount);
            result = new IO.Ably.RequestCount();
            int itemsCount0 = default(int);
            itemsCount0 = MsgPack.Serialization.UnpackHelpers.GetItemsCount(unpacker);
            for (int i = 0; (i < itemsCount0); i = (i + 1))
            {
                string key = default(string);
                string nullable2 = default(string);
                nullable2 = MsgPack.Serialization.UnpackHelpers.UnpackStringValue(unpacker, typeof(IO.Ably.RequestCount),
                    "MemberName");
                if (((nullable2 == null)
                     == false))
                {
                    key = nullable2;
                }
                else
                {
                    throw MsgPack.Serialization.SerializationExceptions.NewNullIsProhibited("MemberName");
                }
                if ((key == "succeeded"))
                {
                    System.Nullable<long> nullable5 = default(System.Nullable<long>);
                    nullable5 = MsgPack.Serialization.UnpackHelpers.UnpackNullableInt64Value(unpacker,
                        typeof(IO.Ably.RequestCount), "Double Succeeded");
                    if (nullable5.HasValue)
                    {
                        result.Succeeded = nullable5.Value;
                    }
                }
                else
                {
                    if ((key == "refused"))
                    {
                        System.Nullable<long> nullable4 = default(System.Nullable<long>);
                        nullable4 = MsgPack.Serialization.UnpackHelpers.UnpackNullableInt64Value(unpacker,
                            typeof(IO.Ably.RequestCount), "Double Refused");
                        if (nullable4.HasValue)
                        {
                            result.Refused = nullable4.Value;
                        }
                    }
                    else
                    {
                        if ((key == "failed"))
                        {
                            System.Nullable<long> nullable3 = default(System.Nullable<long>);
                            nullable3 = MsgPack.Serialization.UnpackHelpers.UnpackNullableInt64Value(unpacker,
                                typeof(IO.Ably.RequestCount), "Double Failed");
                            if (nullable3.HasValue)
                            {
                                result.Failed = nullable3.Value;
                            }
                        }
                        else
                        {
                            unpacker.Skip();
                        }
                    }
                }
            }
            return result;
        }

        private static T @__Conditional<T>(bool condition, T whenTrue, T whenFalse)
         {
            if (condition) {
                return whenTrue;
            }
            else {
                return whenFalse;
            }
        }
    }
}
