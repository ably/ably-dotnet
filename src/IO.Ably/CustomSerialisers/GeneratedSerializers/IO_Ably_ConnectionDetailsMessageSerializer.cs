//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace IO.Ably.CustomSerialisers {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("MsgPack.Serialization.CodeDomSerializers.CodeDomSerializerBuilder", "0.6.0.0")]
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public class IO_Ably_ConnectionDetailsMessageSerializer : MsgPack.Serialization.MessagePackSerializer<IO.Ably.ConnectionDetailsMessage> {
        
        private MsgPack.Serialization.MessagePackSerializer<string> _serializer0;
        
        private MsgPack.Serialization.MessagePackSerializer<System.Nullable<System.TimeSpan>> _serializer1;
        
        private MsgPack.Serialization.MessagePackSerializer<long> _serializer2;
        
        public IO_Ably_ConnectionDetailsMessageSerializer(MsgPack.Serialization.SerializationContext context) : 
                base(context) {
            MsgPack.Serialization.PolymorphismSchema schema0 = default(MsgPack.Serialization.PolymorphismSchema);
            schema0 = null;
            this._serializer0 = context.GetSerializer<string>(schema0);
            MsgPack.Serialization.PolymorphismSchema schema1 = default(MsgPack.Serialization.PolymorphismSchema);
            schema1 = null;
            this._serializer1 = context.GetSerializer<System.Nullable<System.TimeSpan>>(schema1);
            MsgPack.Serialization.PolymorphismSchema schema2 = default(MsgPack.Serialization.PolymorphismSchema);
            schema2 = null;
            this._serializer2 = context.GetSerializer<long>(schema2);
        }
        
        protected override void PackToCore(MsgPack.Packer packer, IO.Ably.ConnectionDetailsMessage objectTree) {
            packer.PackMapHeader(7);
            this._serializer0.PackTo(packer, "clientId");
            this._serializer0.PackTo(packer, objectTree.clientId);
            this._serializer0.PackTo(packer, "connectionKey");
            this._serializer0.PackTo(packer, objectTree.connectionKey);
            this._serializer0.PackTo(packer, "connectionStateTtl");
            this._serializer1.PackTo(packer, objectTree.connectionStateTtl);
            this._serializer0.PackTo(packer, "maxFrameSize");
            this._serializer2.PackTo(packer, objectTree.maxFrameSize);
            this._serializer0.PackTo(packer, "maxInboundRate");
            this._serializer2.PackTo(packer, objectTree.maxInboundRate);
            this._serializer0.PackTo(packer, "maxMessageSize");
            this._serializer2.PackTo(packer, objectTree.maxMessageSize);
            this._serializer0.PackTo(packer, "serverId");
            this._serializer0.PackTo(packer, objectTree.serverId);
        }
        
        protected override IO.Ably.ConnectionDetailsMessage UnpackFromCore(MsgPack.Unpacker unpacker) {
            IO.Ably.ConnectionDetailsMessage result = default(IO.Ably.ConnectionDetailsMessage);
            result = new IO.Ably.ConnectionDetailsMessage();
            if (unpacker.IsArrayHeader) {
                int unpacked = default(int);
                int itemsCount = default(int);
                itemsCount = MsgPack.Serialization.UnpackHelpers.GetItemsCount(unpacker);
                string nullable = default(string);
                if ((unpacked < itemsCount)) {
                    nullable = MsgPack.Serialization.UnpackHelpers.UnpackStringValue(unpacker, typeof(IO.Ably.ConnectionDetailsMessage), "System.String clientId");
                }
                if (((nullable == null) 
                            == false)) {
                    result.clientId = nullable;
                }
                unpacked = (unpacked + 1);
                string nullable0 = default(string);
                if ((unpacked < itemsCount)) {
                    nullable0 = MsgPack.Serialization.UnpackHelpers.UnpackStringValue(unpacker, typeof(IO.Ably.ConnectionDetailsMessage), "System.String connectionKey");
                }
                if (((nullable0 == null) 
                            == false)) {
                    result.connectionKey = nullable0;
                }
                unpacked = (unpacked + 1);
                System.Nullable<System.TimeSpan> nullable1 = default(System.Nullable<System.TimeSpan>);
                if ((unpacked < itemsCount)) {
                    if ((unpacker.Read() == false)) {
                        throw MsgPack.Serialization.SerializationExceptions.NewMissingItem(2);
                    }
                    if (((unpacker.IsArrayHeader == false) 
                                && (unpacker.IsMapHeader == false))) {
                        nullable1 = this._serializer1.UnpackFrom(unpacker);
                    }
                    else {
                        MsgPack.Unpacker disposable = default(MsgPack.Unpacker);
                        disposable = unpacker.ReadSubtree();
                        try {
                            nullable1 = this._serializer1.UnpackFrom(disposable);
                        }
                        finally {
                            if (((disposable == null) 
                                        == false)) {
                                disposable.Dispose();
                            }
                        }
                    }
                }
                if (nullable1.HasValue) {
                    result.connectionStateTtl = nullable1;
                }
                unpacked = (unpacked + 1);
                System.Nullable<long> nullable2 = default(System.Nullable<long>);
                if ((unpacked < itemsCount)) {
                    nullable2 = MsgPack.Serialization.UnpackHelpers.UnpackNullableInt64Value(unpacker, typeof(IO.Ably.ConnectionDetailsMessage), "Int64 maxFrameSize");
                }
                if (nullable2.HasValue) {
                    result.maxFrameSize = nullable2.Value;
                }
                unpacked = (unpacked + 1);
                System.Nullable<long> nullable3 = default(System.Nullable<long>);
                if ((unpacked < itemsCount)) {
                    nullable3 = MsgPack.Serialization.UnpackHelpers.UnpackNullableInt64Value(unpacker, typeof(IO.Ably.ConnectionDetailsMessage), "Int64 maxInboundRate");
                }
                if (nullable3.HasValue) {
                    result.maxInboundRate = nullable3.Value;
                }
                unpacked = (unpacked + 1);
                System.Nullable<long> nullable4 = default(System.Nullable<long>);
                if ((unpacked < itemsCount)) {
                    nullable4 = MsgPack.Serialization.UnpackHelpers.UnpackNullableInt64Value(unpacker, typeof(IO.Ably.ConnectionDetailsMessage), "Int64 maxMessageSize");
                }
                if (nullable4.HasValue) {
                    result.maxMessageSize = nullable4.Value;
                }
                unpacked = (unpacked + 1);
                string nullable5 = default(string);
                if ((unpacked < itemsCount)) {
                    nullable5 = MsgPack.Serialization.UnpackHelpers.UnpackStringValue(unpacker, typeof(IO.Ably.ConnectionDetailsMessage), "System.String serverId");
                }
                if (((nullable5 == null) 
                            == false)) {
                    result.serverId = nullable5;
                }
                unpacked = (unpacked + 1);
            }
            else {
                int itemsCount0 = default(int);
                itemsCount0 = MsgPack.Serialization.UnpackHelpers.GetItemsCount(unpacker);
                for (int i = 0; (i < itemsCount0); i = (i + 1)) {
                    string key = default(string);
                    string nullable6 = default(string);
                    nullable6 = MsgPack.Serialization.UnpackHelpers.UnpackStringValue(unpacker, typeof(IO.Ably.ConnectionDetailsMessage), "MemberName");
                    if (((nullable6 == null) 
                                == false)) {
                        key = nullable6;
                    }
                    else {
                        throw MsgPack.Serialization.SerializationExceptions.NewNullIsProhibited("MemberName");
                    }
                    if ((key == "serverId")) {
                        string nullable13 = default(string);
                        nullable13 = MsgPack.Serialization.UnpackHelpers.UnpackStringValue(unpacker, typeof(IO.Ably.ConnectionDetailsMessage), "System.String serverId");
                        if (((nullable13 == null) 
                                    == false)) {
                            result.serverId = nullable13;
                        }
                    }
                    else {
                        if ((key == "maxMessageSize")) {
                            System.Nullable<long> nullable12 = default(System.Nullable<long>);
                            nullable12 = MsgPack.Serialization.UnpackHelpers.UnpackNullableInt64Value(unpacker, typeof(IO.Ably.ConnectionDetailsMessage), "Int64 maxMessageSize");
                            if (nullable12.HasValue) {
                                result.maxMessageSize = nullable12.Value;
                            }
                        }
                        else {
                            if ((key == "maxInboundRate")) {
                                System.Nullable<long> nullable11 = default(System.Nullable<long>);
                                nullable11 = MsgPack.Serialization.UnpackHelpers.UnpackNullableInt64Value(unpacker, typeof(IO.Ably.ConnectionDetailsMessage), "Int64 maxInboundRate");
                                if (nullable11.HasValue) {
                                    result.maxInboundRate = nullable11.Value;
                                }
                            }
                            else {
                                if ((key == "maxFrameSize")) {
                                    System.Nullable<long> nullable10 = default(System.Nullable<long>);
                                    nullable10 = MsgPack.Serialization.UnpackHelpers.UnpackNullableInt64Value(unpacker, typeof(IO.Ably.ConnectionDetailsMessage), "Int64 maxFrameSize");
                                    if (nullable10.HasValue) {
                                        result.maxFrameSize = nullable10.Value;
                                    }
                                }
                                else {
                                    if ((key == "connectionStateTtl")) {
                                        System.Nullable<System.TimeSpan> nullable9 = default(System.Nullable<System.TimeSpan>);
                                        if ((unpacker.Read() == false)) {
                                            throw MsgPack.Serialization.SerializationExceptions.NewMissingItem(i);
                                        }
                                        if (((unpacker.IsArrayHeader == false) 
                                                    && (unpacker.IsMapHeader == false))) {
                                            nullable9 = this._serializer1.UnpackFrom(unpacker);
                                        }
                                        else {
                                            MsgPack.Unpacker disposable0 = default(MsgPack.Unpacker);
                                            disposable0 = unpacker.ReadSubtree();
                                            try {
                                                nullable9 = this._serializer1.UnpackFrom(disposable0);
                                            }
                                            finally {
                                                if (((disposable0 == null) 
                                                            == false)) {
                                                    disposable0.Dispose();
                                                }
                                            }
                                        }
                                        if (nullable9.HasValue) {
                                            result.connectionStateTtl = nullable9;
                                        }
                                    }
                                    else {
                                        if ((key == "connectionKey")) {
                                            string nullable8 = default(string);
                                            nullable8 = MsgPack.Serialization.UnpackHelpers.UnpackStringValue(unpacker, typeof(IO.Ably.ConnectionDetailsMessage), "System.String connectionKey");
                                            if (((nullable8 == null) 
                                                        == false)) {
                                                result.connectionKey = nullable8;
                                            }
                                        }
                                        else {
                                            if ((key == "clientId")) {
                                                string nullable7 = default(string);
                                                nullable7 = MsgPack.Serialization.UnpackHelpers.UnpackStringValue(unpacker, typeof(IO.Ably.ConnectionDetailsMessage), "System.String clientId");
                                                if (((nullable7 == null) 
                                                            == false)) {
                                                    result.clientId = nullable7;
                                                }
                                            }
                                            else {
                                                unpacker.Skip();
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
            return result;
        }
        
        private static T @__Conditional<T>(bool condition, T whenTrue, T whenFalse)
         {
            if (condition) {
                return whenTrue;
            }
            else {
                return whenFalse;
            }
        }
    }
}
